@page "/customers/delete"

@using Microsoft.EntityFrameworkCore
@using CustomersCRUD.Models
@inject IDbContextFactory<CustomersCRUD.Data.CustomersCRUDContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Customer</h4>
    <hr />
    @if (customer is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@customer.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Surname</dt>
            <dd class="col-sm-10">@customer.Surname</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@customer.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@customer.Phone</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateOfBirth</dt>
            <dd class="col-sm-10">@customer.DateOfBirth</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@customer.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Credit</dt>
            <dd class="col-sm-10">@customer.Credit</dd>
        </dl>
        <EditForm method="post" Model="customer" OnValidSubmit="DeleteCustomer" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(customer is null)">Delete</button> |
            <a href="/customers">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Customer? customer;

    [SupplyParameterFromQuery]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        customer = await context.Customer.FirstOrDefaultAsync(m => m.Id == Id);

        if (customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCustomer()
    {
        using var context = DbFactory.CreateDbContext();
        context.Customer.Remove(customer!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/customers");
    }
}
